
/* Drop Triggers */

DROP TRIGGER TRG_EMPLOYEETEAMCOUNTCHECK;
DROP TRIGGER TRG_UPDT_RVNUE_ATRCTN_PRCHSE;
DROP TRIGGER TRG_UPDT_RVNUE_PCKG_PRCHSE;
DROP TRIGGER TRG_UPDT_RWRDPTS_DISCSN;
DROP TRIGGER TRG_UPDT_RWRDPTS_DISCSNCMNTS;
DROP TRIGGER TRG_UPDT_RWRDPTS_TRNSCTN;
DROP TRIGGER TRI_ACTIVITYLOG_ID;
DROP TRIGGER TRI_ACTIVITYTYPE_ID;
DROP TRIGGER TRI_ATTRACTIONREVIEW_ID;
DROP TRIGGER TRI_ATTRACTIONTYPE_ID;
DROP TRIGGER TRI_ATTRACTIONVISITED_ID;
DROP TRIGGER TRI_ATTRACTION_ID;
DROP TRIGGER TRI_CITY_ID;
DROP TRIGGER TRI_COMMENTS_ID;
DROP TRIGGER TRI_COMPANY_ID;
DROP TRIGGER TRI_DISCOUNT_ID;
DROP TRIGGER TRI_DISCUSSIONTHREADCOMMENT_ID;
DROP TRIGGER TRI_DISCUSSIONTHREAD_ID;
DROP TRIGGER TRI_DISCUSSIONTOPIC_ID;
DROP TRIGGER TRI_LIKES_ID;
DROP TRIGGER TRI_MEMBERSHIP_TYPE_ID;
DROP TRIGGER TRI_NOTIFICATION_ID;
DROP TRIGGER TRI_PACKAGES_ID;
DROP TRIGGER TRI_ROLE_ID;
DROP TRIGGER TRI_TEAM_ID;
DROP TRIGGER TRI_TICKETSAVAILABLE_ID;
DROP TRIGGER TRI_TRANSACTIONATTRACTION_ID;
DROP TRIGGER TRI_TRANSACTIONINFO_ID;
DROP TRIGGER TRI_TRANSACTIONPACKAGE_ID;
DROP TRIGGER TRI_TRANSACTIONREWARD_ID;
DROP TRIGGER TRI_USERBASE_ID;
DROP TRIGGER TRI_USERPHONES_ID;



/* Drop Tables */

DROP TABLE ACTIVITYLOG;
DROP TABLE ACTIVITYTYPE;
DROP TABLE ATTRACTIONEMPLOYEE;
DROP TABLE ATTRACTIONMANAGEMENT;
DROP TABLE COMMENTS;
DROP TABLE ATTRACTIONREVIEW;
DROP TABLE ATTRACTIONVISITED;
DROP TABLE DISCUSSIONTOPICBYATTRACTION;
DROP TABLE PACKAGEATTRACTION;
DROP TABLE TICKETSAVAILABLE;
DROP TABLE TRANSACTIONATTRACTION;
DROP TABLE ATTRACTION;
DROP TABLE ATTRACTIONTYPE;
DROP TABLE DISCUSSIONTOPICBYCITY;
DROP TABLE TRANSACTIONPACKAGE;
DROP TABLE PACKAGES;
DROP TABLE CITY;

DROP TABLE COMPANY;
DROP TABLE TRANSACTIONDISCOUNT;
DROP TABLE DISCOUNT;
DROP TABLE DISCUSSIONTHREADCOMMENT;
DROP TABLE DISCUSSIONTHREAD;
DROP TABLE DISCUSSIONTOPIC;
DROP TABLE EMPLOYEEBOSS;
DROP TABLE EMPLOYEEDATEWORKING;
DROP TABLE EMPLOYEEROLE;
DROP TABLE EMPLOYEE_TEAM;
DROP TABLE LIKES;
DROP TABLE USERWEBSITE;
DROP TABLE MEMBERSHIP_TYPE;
DROP TABLE NOTIFICATION;
DROP TABLE REVENUE;
DROP TABLE ROLE;
DROP TABLE TEAM;
DROP TABLE TRANSACTIONREWARD;
DROP TABLE TRANSACTIONINFO;
DROP TABLE USEREMPLOYEE;
DROP TABLE USERPAYMENTINFO;
DROP TABLE USERPHONES;
DROP TABLE USERBASE;



/* Drop Sequences */

DROP SEQUENCE SEQ_ACTIVITYLOG_ID;
DROP SEQUENCE SEQ_ACTIVITYTYPE_ID;
DROP SEQUENCE SEQ_ATTRACTIONREVIEW_ID;
DROP SEQUENCE SEQ_ATTRACTIONTYPE_ID;
DROP SEQUENCE SEQ_ATTRACTIONVISITED_ID;
DROP SEQUENCE SEQ_ATTRACTION_ID;
DROP SEQUENCE SEQ_CITY_ID;
DROP SEQUENCE SEQ_COMMENTS_ID;
DROP SEQUENCE SEQ_COMPANY_ID;
DROP SEQUENCE SEQ_DISCOUNT_ID;
DROP SEQUENCE SEQ_DISCUSSIONTHREADCOMMENT_ID;
DROP SEQUENCE SEQ_DISCUSSIONTHREAD_ID;
DROP SEQUENCE SEQ_DISCUSSIONTOPIC_ID;
DROP SEQUENCE SEQ_LIKES_ID;
DROP SEQUENCE SEQ_MEMBERSHIP_TYPE_ID;
DROP SEQUENCE SEQ_NOTIFICATION_ID;
DROP SEQUENCE SEQ_PACKAGES_ID;
DROP SEQUENCE SEQ_ROLE_ID;
DROP SEQUENCE SEQ_TEAM_ID;
DROP SEQUENCE SEQ_TICKETSAVAILABLE_ID;
DROP SEQUENCE SEQ_TRANSACTIONATTRACTION_ID;
DROP SEQUENCE SEQ_TRANSACTIONINFO_ID;
DROP SEQUENCE SEQ_TRANSACTIONPACKAGE_ID;
DROP SEQUENCE SEQ_TRANSACTIONREWARD_ID;
DROP SEQUENCE SEQ_USERBASE_ID;
DROP SEQUENCE SEQ_USERPHONES_ID;




/* Create Sequences */

CREATE SEQUENCE SEQ_ACTIVITYLOG_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_ACTIVITYTYPE_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_ATTRACTIONREVIEW_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_ATTRACTIONTYPE_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_ATTRACTIONVISITED_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_ATTRACTION_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_CITY_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_COMMENTS_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_COMPANY_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_DISCOUNT_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_DISCUSSIONTHREADCOMMENT_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_DISCUSSIONTHREAD_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_DISCUSSIONTOPIC_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_LIKES_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_MEMBERSHIP_TYPE_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_NOTIFICATION_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_PACKAGES_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_ROLE_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_TEAM_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_TICKETSAVAILABLE_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_TRANSACTIONATTRACTION_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_TRANSACTIONINFO_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_TRANSACTIONPACKAGE_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_TRANSACTIONREWARD_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_USERBASE_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;
CREATE SEQUENCE SEQ_USERPHONES_ID MINVALUE 100 INCREMENT BY 1 START WITH 100;



/* Create Tables */

CREATE TABLE ACTIVITYLOG
(
	ID NUMBER NOT NULL,
	ACTIVITYTYPEID NUMBER,
	USERID NUMBER NOT NULL,
	DESCRIPTION VARCHAR2(200),
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE ACTIVITYTYPE
(
	ID NUMBER NOT NULL,
	NAME VARCHAR2(50) NOT NULL,
	POINTSEARNED NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE ATTRACTION
(
	ID NUMBER NOT NULL,
	CODE VARCHAR2(10) NOT NULL,
	NAME VARCHAR2(50) NOT NULL,
	ADDRESS VARCHAR2(70),
	DESCRIPTION VARCHAR2(2000),
	DEFAULT_NO_TICKETS NUMBER NOT NULL,
	CITYID NUMBER NOT NULL,
	ATTRACTIONTYPEID NUMBER NOT NULL,
	TIMINGS VARCHAR2(30) NOT NULL,
	COMMISSION NUMBER(5,2) NOT NULL,
	COMPANYID NUMBER NOT NULL,
	DIRECTORID NUMBER,
	COSTPERTICKET NUMBER(7,2) NOT NULL,
	CREATEDBY DATE NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY DATE NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE ATTRACTIONEMPLOYEE
(
	EMPLOYEEID NUMBER NOT NULL,
	ATTRACTIONID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (EMPLOYEEID, ATTRACTIONID)
);


CREATE TABLE ATTRACTIONMANAGEMENT
(
	ATTRACTIONID NUMBER NOT NULL,
	MAINTENANCECOUNT NUMBER DEFAULT 0 NOT NULL,
	SECURITYCOUNT NUMBER DEFAULT 0 NOT NULL,
	TICKETINGCOUNT NUMBER DEFAULT 0 NOT NULL,
	CURATORCOUNT NUMBER DEFAULT 0 NOT NULL,
	TOURGUIDECOUNT NUMBER DEFAULT 0 NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	STAFFDELEGATIONFLAG NUMBER(1,0),
	PRIMARY KEY (ATTRACTIONID)
);


CREATE TABLE ATTRACTIONREVIEW
(
	ID NUMBER NOT NULL,
	ATTRACTIONID NUMBER NOT NULL,
	USERID NUMBER NOT NULL,
	DESCRIPTION VARCHAR2(2000),
	TITLE VARCHAR2(70),
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE ATTRACTIONTYPE
(
	ID NUMBER NOT NULL,
	NAME VARCHAR2(50) NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE ATTRACTIONVISITED
(
	ID NUMBER NOT NULL,
	TRANSACTIONID NUMBER,
	ATTRACTIONID NUMBER,
	USERID NUMBER,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE CITY
(
	ID NUMBER NOT NULL,
	NAME VARCHAR2(50) NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE COMMENTS
(
	ID NUMBER NOT NULL,
	REVIEWID NUMBER NOT NULL,
	COMMENTTEXT VARCHAR2(2000),
	USERID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE COMPANY
(
	ID NUMBER NOT NULL,
	NAME VARCHAR2(50) NOT NULL,
	ADDRESS VARCHAR2(40),
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE DISCOUNT
(
	ID NUMBER NOT NULL,
	NAME VARCHAR2(50) NOT NULL,
	MEMBERSHIPTYPEID NUMBER NOT NULL,
	-- % / $
	FORMULA VARCHAR2(20) NOT NULL,
	FORMULAVALUE NUMBER(7,2) NOT NULL,
	NOOFTRANSACTIONS NUMBER,
	ISACTIVE NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE DISCUSSIONTHREAD
(
	ID NUMBER NOT NULL,
	TOPICID NUMBER NOT NULL,
	TITLE VARCHAR2(70),
	DESCRIPTION VARCHAR2(2000),
	USERID NUMBER,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE DISCUSSIONTHREADCOMMENT
(
	ID NUMBER NOT NULL,
	THREADID NUMBER NOT NULL,
	TITLE VARCHAR2(70),
	DESCRIPTION VARCHAR2(2000),
	USERID NUMBER,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE DISCUSSIONTOPIC
(
	ID NUMBER NOT NULL,
	TITLE VARCHAR2(70) NOT NULL,
	DESCRIPTION VARCHAR2(2000),
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE DISCUSSIONTOPICBYATTRACTION
(
	ATTRACTIONID NUMBER NOT NULL,
	DISCUSSIONTOPICID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ATTRACTIONID, DISCUSSIONTOPICID)
);


CREATE TABLE DISCUSSIONTOPICBYCITY
(
	CITYID NUMBER NOT NULL,
	DISCUSSIONTOPICID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (CITYID, DISCUSSIONTOPICID)
);


CREATE TABLE EMPLOYEEBOSS
(
	EMPLOYEEID NUMBER NOT NULL,
	BOSSEMPLOYEEID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (EMPLOYEEID, BOSSEMPLOYEEID)
);


CREATE TABLE EMPLOYEEDATEWORKING
(
	DAYOFF DATE NOT NULL,
	LEAVE_REASON VARCHAR2(50),
	USERID NUMBER NOT NULL,
	CREATEDBY NUMBER,
	CREATEON DATE,
	MODIFIEDBY NUMBER,
	MODIFIEDON DATE,
	PRIMARY KEY (DAYOFF, USERID)
);


CREATE TABLE EMPLOYEEROLE
(
	EMPLOYEEID NUMBER NOT NULL,
	ROLEID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (EMPLOYEEID, ROLEID)
);


CREATE TABLE EMPLOYEE_TEAM
(
	EMPLOYEEID NUMBER NOT NULL,
	TEAMID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (EMPLOYEEID, TEAMID)
);


CREATE TABLE LIKES
(
	ID NUMBER NOT NULL,
	-- 1- City
	-- 2- Review
	-- 3- Topic
	-- 4- Attraction
	CONTENTTYPE NUMBER(7,0) NOT NULL,
	USERID NUMBER,
	-- 1- Like
	-- 2- Dislike
	LIKEORDISLIKE NUMBER NOT NULL,
	-- This can be the ID of the city, review, topic or attraction
	FOREIGNID NUMBER(7,0) NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE MEMBERSHIP_TYPE
(
	ID NUMBER NOT NULL,
	NAME VARCHAR2(50) NOT NULL,
	CREDIT_POINTS_NEEDED NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE NOTIFICATION
(
	ID NUMBER NOT NULL,
	USERID NUMBER,
	TITLE VARCHAR2(50) NOT NULL,
	DESCRIPTION VARCHAR2(200),
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE PACKAGEATTRACTION
(
	PACKAGEID NUMBER NOT NULL,
	ATTRACTIONID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (PACKAGEID, ATTRACTIONID)
);


CREATE TABLE PACKAGES
(
	ID NUMBER NOT NULL,
	NAME VARCHAR2(50) NOT NULL,
	DESCRIPTION VARCHAR2(2000),
	COSTPERTICKET NUMBER(7,2) NOT NULL,
	CITYID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE REVENUE
(
	TRANSACTIONID NUMBER NOT NULL,
	REVENUEAMOUNT NUMBER,
	-- 0-deleted
	-- 1-Own Revenue
	-- 2-Commision Earned
	REVENUETYPE NUMBER,
	CREATEDBY NUMBER,
	CREATEON DATE,
	MODIFIEDBY NUMBER,
	MODIFIEDON DATE,
	PRIMARY KEY (TRANSACTIONID)
);


CREATE TABLE ROLE
(
	ID NUMBER NOT NULL,
	NAME VARCHAR2(50) NOT NULL,
	DESCRIPTION VARCHAR2(200),
	-- Marketing / Operations
	TYPE NVARCHAR2(20),
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE TEAM
(
	ID NUMBER NOT NULL,
	NAME VARCHAR2(50) NOT NULL,
	BOSS_EMPLOYEE_ID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE TICKETSAVAILABLE
(
	ID NUMBER NOT NULL,
	ATTRACTIONID NUMBER NOT NULL,
	REMAININGTICKETS NUMBER NOT NULL,
	DATEAVAILABLE DATE NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE TRANSACTIONATTRACTION
(
	ID NUMBER NOT NULL,
	TRANSACTIONID NUMBER NOT NULL,
	ATTRACTIONID NUMBER NOT NULL,
	TICKETCOUNT NUMBER DEFAULT 1 NOT NULL,
	TICKETEXPIRATIONDATE DATE NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE TRANSACTIONDISCOUNT
(
	TRANSACTIONID NUMBER NOT NULL,
	DISCOUNTID NUMBER NOT NULL,
	DISCOUNTAMOUNT NUMBER(7,2) NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (TRANSACTIONID, DISCOUNTID)
);


CREATE TABLE TRANSACTIONINFO
(
	ID NUMBER NOT NULL,
	USERID NUMBER NOT NULL,
	AMOUNT NUMBER NOT NULL,
	REWARDPOINTSUSED NUMBER(7,0) DEFAULT 0 NOT NULL,
	CREDITCARDAMOUNT NUMBER(7,2) DEFAULT 0 NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE TRANSACTIONPACKAGE
(
	ID NUMBER NOT NULL,
	TRANSACTIONID NUMBER NOT NULL,
	PACKAGEID NUMBER NOT NULL,
	TICKETCOUNT NUMBER DEFAULT 1 NOT NULL,
	TICKETEXPIRATIONDATE DATE NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE TRANSACTIONREWARD
(
	ID NUMBER NOT NULL,
	TRANSACTIONID NUMBER NOT NULL,
	REWARDPOINTSBOUGHT NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE USERBASE
(
	ID NUMBER NOT NULL,
	DISPLAYNAME VARCHAR2(50) NOT NULL,
	EMAIL VARCHAR2(30) NOT NULL,
	PASSWORD VARCHAR2(20) NOT NULL,
	ADDRESS VARCHAR2(70) NOT NULL,
	CITY VARCHAR2(50),
	ZIPCODE VARCHAR2(20) NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE USEREMPLOYEE
(
	USERID NUMBER NOT NULL,
	SSN NUMBER(9,0) NOT NULL,
	COMPANYID NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (USERID)
);


CREATE TABLE USERPAYMENTINFO
(
	USERID NUMBER NOT NULL,
	CREDITCARDNUMBER NUMBER NOT NULL,
	EXPIRYDATE DATE NOT NULL,
	CODE NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (USERID)
);


CREATE TABLE USERPHONES
(
	ID NUMBER NOT NULL,
	USERID NUMBER NOT NULL,
	PHONENUMBER NUMBER(15,0) NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE USERWEBSITE
(
	USERID NUMBER NOT NULL,
	REWARDPOINTS NUMBER NOT NULL,
	CREDITPOINTS NUMBER NOT NULL,
	MEMBERSHIPTYPE NUMBER NOT NULL,
	CREATEDBY NUMBER NOT NULL,
	CREATEDON DATE NOT NULL,
	MODIFIEDBY NUMBER NOT NULL,
	MODIFIEDON DATE NOT NULL,
	PRIMARY KEY (USERID)
);



/* Create Foreign Keys */

ALTER TABLE ACTIVITYLOG
	ADD FOREIGN KEY (ACTIVITYTYPEID)
	REFERENCES ACTIVITYTYPE (ID)
;


ALTER TABLE ATTRACTIONEMPLOYEE
	ADD FOREIGN KEY (ATTRACTIONID)
	REFERENCES ATTRACTION (ID)
;


ALTER TABLE ATTRACTIONMANAGEMENT
	ADD FOREIGN KEY (ATTRACTIONID)
	REFERENCES ATTRACTION (ID)
;


ALTER TABLE ATTRACTIONREVIEW
	ADD FOREIGN KEY (ATTRACTIONID)
	REFERENCES ATTRACTION (ID)
;


ALTER TABLE ATTRACTIONVISITED
	ADD FOREIGN KEY (ATTRACTIONID)
	REFERENCES ATTRACTION (ID)
;


ALTER TABLE DISCUSSIONTOPICBYATTRACTION
	ADD FOREIGN KEY (ATTRACTIONID)
	REFERENCES ATTRACTION (ID)
;


ALTER TABLE PACKAGEATTRACTION
	ADD FOREIGN KEY (ATTRACTIONID)
	REFERENCES ATTRACTION (ID)
;


ALTER TABLE TICKETSAVAILABLE
	ADD FOREIGN KEY (ATTRACTIONID)
	REFERENCES ATTRACTION (ID)
;


ALTER TABLE TRANSACTIONATTRACTION
	ADD FOREIGN KEY (ATTRACTIONID)
	REFERENCES ATTRACTION (ID)
;


ALTER TABLE COMMENTS
	ADD FOREIGN KEY (REVIEWID)
	REFERENCES ATTRACTIONREVIEW (ID)
;


ALTER TABLE ATTRACTION
	ADD FOREIGN KEY (ATTRACTIONTYPEID)
	REFERENCES ATTRACTIONTYPE (ID)
;


ALTER TABLE ATTRACTION
	ADD FOREIGN KEY (CITYID)
	REFERENCES CITY (ID)
;


ALTER TABLE DISCUSSIONTOPICBYCITY
	ADD FOREIGN KEY (CITYID)
	REFERENCES CITY (ID)
;


ALTER TABLE PACKAGES
	ADD FOREIGN KEY (CITYID)
	REFERENCES CITY (ID)
;


ALTER TABLE ATTRACTION
	ADD CONSTRAINT FK_COMPANY_ATTRACTION FOREIGN KEY (COMPANYID)
	REFERENCES COMPANY (ID)
;


ALTER TABLE TRANSACTIONDISCOUNT
	ADD FOREIGN KEY (DISCOUNTID)
	REFERENCES DISCOUNT (ID)
;


ALTER TABLE DISCUSSIONTHREADCOMMENT
	ADD FOREIGN KEY (THREADID)
	REFERENCES DISCUSSIONTHREAD (ID)
;


ALTER TABLE DISCUSSIONTHREAD
	ADD FOREIGN KEY (TOPICID)
	REFERENCES DISCUSSIONTOPIC (ID)
;


ALTER TABLE DISCUSSIONTOPICBYATTRACTION
	ADD FOREIGN KEY (DISCUSSIONTOPICID)
	REFERENCES DISCUSSIONTOPIC (ID)
;


ALTER TABLE DISCUSSIONTOPICBYCITY
	ADD FOREIGN KEY (DISCUSSIONTOPICID)
	REFERENCES DISCUSSIONTOPIC (ID)
;


ALTER TABLE DISCOUNT
	ADD FOREIGN KEY (MEMBERSHIPTYPEID)
	REFERENCES MEMBERSHIP_TYPE (ID)
;


ALTER TABLE USERWEBSITE
	ADD FOREIGN KEY (MEMBERSHIPTYPE)
	REFERENCES MEMBERSHIP_TYPE (ID)
;


ALTER TABLE PACKAGEATTRACTION
	ADD FOREIGN KEY (PACKAGEID)
	REFERENCES PACKAGES (ID)
;


ALTER TABLE TRANSACTIONPACKAGE
	ADD FOREIGN KEY (PACKAGEID)
	REFERENCES PACKAGES (ID)
;


ALTER TABLE EMPLOYEEROLE
	ADD FOREIGN KEY (ROLEID)
	REFERENCES ROLE (ID)
;


ALTER TABLE EMPLOYEE_TEAM
	ADD FOREIGN KEY (TEAMID)
	REFERENCES TEAM (ID)
;


ALTER TABLE ATTRACTIONVISITED
	ADD FOREIGN KEY (TRANSACTIONID)
	REFERENCES TRANSACTIONINFO (ID)
;


ALTER TABLE REVENUE
	ADD FOREIGN KEY (TRANSACTIONID)
	REFERENCES TRANSACTIONINFO (ID)
;


ALTER TABLE TRANSACTIONATTRACTION
	ADD FOREIGN KEY (TRANSACTIONID)
	REFERENCES TRANSACTIONINFO (ID)
;


ALTER TABLE TRANSACTIONDISCOUNT
	ADD FOREIGN KEY (TRANSACTIONID)
	REFERENCES TRANSACTIONINFO (ID)
;


ALTER TABLE TRANSACTIONPACKAGE
	ADD FOREIGN KEY (TRANSACTIONID)
	REFERENCES TRANSACTIONINFO (ID)
;


ALTER TABLE TRANSACTIONREWARD
	ADD FOREIGN KEY (TRANSACTIONID)
	REFERENCES TRANSACTIONINFO (ID)
;


ALTER TABLE ACTIVITYLOG
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE ATTRACTIONREVIEW
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE ATTRACTIONVISITED
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE COMMENTS
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE DISCUSSIONTHREAD
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE DISCUSSIONTHREADCOMMENT
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE LIKES
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE NOTIFICATION
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;

ALTER TABLE TRANSACTIONINFO
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE USEREMPLOYEE
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE USERPAYMENTINFO
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE USERPHONES
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE USERWEBSITE
	ADD FOREIGN KEY (USERID)
	REFERENCES USERBASE (ID)
;


ALTER TABLE ATTRACTION
	ADD FOREIGN KEY (DIRECTORID)
	REFERENCES USEREMPLOYEE (USERID)
;


ALTER TABLE ATTRACTIONEMPLOYEE
	ADD FOREIGN KEY (EMPLOYEEID)
	REFERENCES USEREMPLOYEE (USERID)
;


ALTER TABLE EMPLOYEEBOSS
	ADD FOREIGN KEY (EMPLOYEEID)
	REFERENCES USEREMPLOYEE (USERID)
;


ALTER TABLE EMPLOYEEBOSS
	ADD FOREIGN KEY (BOSSEMPLOYEEID)
	REFERENCES USEREMPLOYEE (USERID)
;


ALTER TABLE EMPLOYEEDATEWORKING
	ADD FOREIGN KEY (USERID)
	REFERENCES USEREMPLOYEE (USERID)
;


ALTER TABLE EMPLOYEEROLE
	ADD FOREIGN KEY (EMPLOYEEID)
	REFERENCES USEREMPLOYEE (USERID)
;


ALTER TABLE EMPLOYEE_TEAM
	ADD FOREIGN KEY (EMPLOYEEID)
	REFERENCES USEREMPLOYEE (USERID)
;


ALTER TABLE TEAM
	ADD FOREIGN KEY (BOSS_EMPLOYEE_ID)
	REFERENCES USEREMPLOYEE (USERID)
;

/* Create Functions */
create or replace function get_employee_leave_status(emp_id number, dt_given date)
return varchar2 as
begin
declare
       ret_status varchar2(50);
       emp_role varchar2(50);
       onleave number;
begin

       -- check if the employee was or will be on leave on the specified date. If on leave return 'On Leave'
       select count(dayoff) into onleave from employeedateworking where TRUNC( dayoff) = TO_DATE(dt_given) and userid = emp_id;
       if onleave >0 then
          ret_status := 'On Leave';
          return ret_status;
       end if;
       -- get the role for this employee. In case the employee has two role, show them supported by 'AND'
       for rls in (select role.name rolename from employeerole emr, role where emr.roleid = role.id and emr.employeeid = emp_id)
       loop
          
          if ret_status is null then
              ret_status := ret_status || rls.rolename;
          else
              ret_status := ret_status || ' AND ' || rls.rolename;
          end if;
          
       end loop;
return ret_status;
end;
end;
/
create or replace function Get_SecPerson_Unavailable( directId number, date_req date)
return varchar2
 as
begin
     declare attractid number;
             attractname attraction.name%type;
             count_rec number;
             tom_date date;
             flag_securityAvailable number;
             ret_notifications varchar2(500);
begin
    -- Get tomorrows date
     tom_date := current_date + 1;
    
    -- Set security_available flag to false
     flag_securityAvailable := 0;
    
    -- Get  attraction under this director
    for  attrs in (select id, name from attraction where directorid = directid)
    loop
        attractid :=attrs.id; 
        attractname := attrs.name; 
        -- Get employees who work as security for this attraction
        for  i in (select erl.employeeid as employeeid  from attractionemployee att,employeerole erl where 
        attractionid = attractid and erl.roleid=8 and att.employeeid = erl.employeeid)
        loop
            -- Check if employee is on leave tomorrow.
            select count(*) into count_rec from employeedateworking where userid = i.employeeid and TRUNC( dayoff) = TO_DATE(date_req);
            if count_rec > 0 then
                 flag_securityAvailable := 0;
                 --exit;
                 
            else 
                flag_securityAvailable := 1;
               exit;
            end if;
        end loop;
        if flag_securityAvailable = 0 then
        ret_notifications := ret_notifications || 'Security personnel unvailable at ' || attractname ||' on '|| TO_char(date_req,'MON/DD/YYYY') || ',' ||'There are no attraction security staff available at '|| attractname ||' on '|| TO_char(date_req,'MON/DD/YYYY') || '|';
        end if;
    end loop;
return ret_notifications;
end;
end;
        
        
 
/
create or replace function get_revenue_amount_attraction(transid number,attractid number)
return number is
begin
declare ret_revenue_amount number default 0;
            creditcardamount number default 0;
            companyid number default 0;
            commission number default 0;
begin

 
select creditcardamount into creditcardamount from transactioninfo where id =transid;
select companyid, commission into companyid,commission from attraction where id=attractid;

if companyid = 1 then
  ret_revenue_amount := creditcardamount;
else 
 ret_revenue_amount := creditcardamount * commission /100;
end if;

return ret_revenue_amount;
END;
END;

/

create or replace function get_revenue_amount_package(transid number,packgid number)
return number is
begin
declare ret_revenue_amount number(7,2) default 0;
            creditcardamount_t number default 0;
            companyid_t number default 0;
            commission_t number default 0;
            attid_t number;
            attractionTicketCost_t number default 0.00;
            total_default_attraction_cost number default 0.00;
            
           
begin

 
select creditcardamount into creditcardamount_t from transactioninfo where id =transid;
--select attractionid into attid from packageattraction where packageid = packageid;

select sum(costperticket) into total_default_attraction_cost from packageattraction,attraction where 
packageattraction.packageid= packgid and attraction.id =packageattraction.attractionid;
 
   
FOR i in (select attractionid from packageattraction where packageid = packgid)
LOOP
       select companyid, commission,costperticket into companyid_t,commission_t,attractionTicketCost_t from attraction where id=i.attractionid;
       if companyid_t = 1 then
         ret_revenue_amount := ret_revenue_amount + attractionTicketCost_t  * creditcardamount_t/total_default_attraction_cost;
       else 
         ret_revenue_amount := ret_revenue_amount + attractionTicketCost_t  * commission_t * creditcardamount_t/(100.00 * total_default_attraction_cost);
       end if;
 

   end loop;
 
   return ret_revenue_amount;
END;
END;
/

/* Create Triggers */
create or replace trigger trg_notification_user
after update or insert of membershiptype on userwebsite
for each row
begin
    declare membershipstatus  membership_type.name%TYPE;
begin
    select name into membershipstatus from membership_type where id = :NEW.membershiptype;
    insert into notification(id, userid, title, description, createdby, createdon, modifiedby, modifiedon ) values(0,:NEW.userid,'Membership Status Changed','You are now a ' || membershipstatus || ' member', 1, current_Date, 1, current_date);
END;
END;
/
CREATE TRIGGER TRG_EMPLOYEETEAMCOUNTCHECK BEFORE INSERT ON EMPLOYEE_TEAM
FOR EACH ROW
DECLARE  COUNT_TEAM NUMBER;
             
BEGIN
SELECT COUNT(EMPLOYEEID) INTO COUNT_TEAM FROM EMPLOYEE_TEAM WHERE EMPLOYEEID=:NEW.EMPLOYEEID;
 
 IF COUNT_TEAM >= 3 THEN
 
RAISE_APPLICATION_ERROR(-20005, 'EMPLOYEE_NOT_ALLOWED_IN_4_TEAMS');
END IF;
 END;
 /
CREATE TRIGGER TRG_UPDT_RVNUE_ATRCTN_PRCHSE AFTER INSERT ON TRANSACTIONATTRACTION
FOR EACH ROW

DECLARE  REVENUE_T NUMBER(7,2);
             
BEGIN
REVENUE_T := GET_REVENUE_AMOUNT_ATTRACTION(:NEW.TRANSACTIONID,:NEW.ATTRACTIONID);

 INSERT INTO REVENUE (TRANSACTIONID, REVENUEAMOUNT, CREATEDBY,CREATEON,MODIFIEDBY,MODIFIEDON)
    VALUES (:NEW.TRANSACTIONID,REVENUE_T,1, CURRENT_DATE,1,CURRENT_DATE);


END;
/
CREATE TRIGGER TRG_UPDT_RVNUE_PCKG_PRCHSE AFTER INSERT ON TRANSACTIONPACKAGE
FOR EACH ROW

DECLARE  REVENUE_T NUMBER(7,2);
             
BEGIN
REVENUE_T := GET_REVENUE_AMOUNT_PACKAGE(:NEW.TRANSACTIONID,:NEW.PACKAGEID);

 INSERT INTO REVENUE (TRANSACTIONID, REVENUEAMOUNT, CREATEDBY,CREATEON,MODIFIEDBY,MODIFIEDON)
    VALUES (:NEW.TRANSACTIONID,REVENUE_T,1, CURRENT_DATE,1,CURRENT_DATE);


END;
/
CREATE TRIGGER TRG_UPDT_RWRDPTS_DISCSN AFTER INSERT ON DISCUSSIONTHREAD
FOR EACH ROW

DECLARE  POINTS_T NUMBER;
         MEMBERSHIPTYPE_T NUMBER;
             
BEGIN
POINTS_T := 2;
SELECT ID INTO MEMBERSHIPTYPE_T FROM MEMBERSHIP_TYPE WHERE CREDIT_POINTS_NEEDED <= (SELECT CREDITPOINTS + POINTS_T FROM USERWEBSITE WHERE USERID=7) AND ROWNUM=1;
UPDATE USERWEBSITE SET REWARDPOINTS = REWARDPOINTS + POINTS_T , CREDITPOINTS = CREDITPOINTS + POINTS_T, MEMBERSHIPTYPE = MEMBERSHIPTYPE_T  WHERE USERID = :NEW.USERID;
END;
/
CREATE TRIGGER TRG_UPDT_RWRDPTS_DISCSNCMNTS AFTER INSERT ON DISCUSSIONTHREADCOMMENT
FOR EACH ROW

DECLARE  POINTS_T NUMBER;
         MEMBERSHIPTYPE_T NUMBER;
             
BEGIN
POINTS_T := 2;
SELECT ID INTO MEMBERSHIPTYPE_T FROM MEMBERSHIP_TYPE WHERE CREDIT_POINTS_NEEDED <= (SELECT CREDITPOINTS + POINTS_T FROM USERWEBSITE WHERE USERID=7) AND ROWNUM=1;
UPDATE USERWEBSITE SET REWARDPOINTS = REWARDPOINTS + POINTS_T , CREDITPOINTS = CREDITPOINTS + POINTS_T, MEMBERSHIPTYPE = MEMBERSHIPTYPE_T  WHERE USERID = :NEW.USERID;
END;
/
CREATE TRIGGER TRG_UPDT_RWRDPTS_TRNSCTN AFTER INSERT ON TRANSACTIONINFO
FOR EACH ROW

DECLARE  POINTS_T NUMBER;
         MEMBERSHIPTYPE_T NUMBER;
             
BEGIN
POINTS_T := :NEW.CREDITCARDAMOUNT;
SELECT ID INTO MEMBERSHIPTYPE_T FROM MEMBERSHIP_TYPE WHERE CREDIT_POINTS_NEEDED <= (SELECT CREDITPOINTS + POINTS_T FROM USERWEBSITE WHERE USERID=7) AND ROWNUM=1;
UPDATE USERWEBSITE SET REWARDPOINTS = REWARDPOINTS + POINTS_T , CREDITPOINTS = CREDITPOINTS + POINTS_T, MEMBERSHIPTYPE = MEMBERSHIPTYPE_T  WHERE USERID = :NEW.USERID;
END;
/
CREATE TRIGGER TRI_ACTIVITYLOG_ID BEFORE INSERT ON ACTIVITYLOG
FOR EACH ROW
BEGIN
	SELECT SEQ_ACTIVITYLOG_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_ACTIVITYTYPE_ID BEFORE INSERT ON ACTIVITYTYPE
FOR EACH ROW
BEGIN
	SELECT SEQ_ACTIVITYTYPE_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_ATTRACTIONREVIEW_ID BEFORE INSERT ON ATTRACTIONREVIEW
FOR EACH ROW
BEGIN
	SELECT SEQ_ATTRACTIONREVIEW_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_ATTRACTIONTYPE_ID BEFORE INSERT ON ATTRACTIONTYPE
FOR EACH ROW
BEGIN
	SELECT SEQ_ATTRACTIONTYPE_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_ATTRACTIONVISITED_ID BEFORE INSERT ON ATTRACTIONVISITED
FOR EACH ROW
BEGIN
	SELECT SEQ_ATTRACTIONVISITED_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_ATTRACTION_ID BEFORE INSERT ON ATTRACTION
FOR EACH ROW
BEGIN
	SELECT SEQ_ATTRACTION_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_CITY_ID BEFORE INSERT ON CITY
FOR EACH ROW
BEGIN
	SELECT SEQ_CITY_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_COMMENTS_ID BEFORE INSERT ON COMMENTS
FOR EACH ROW
BEGIN
	SELECT SEQ_COMMENTS_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_COMPANY_ID BEFORE INSERT ON COMPANY
FOR EACH ROW
BEGIN
	SELECT SEQ_COMPANY_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_DISCOUNT_ID BEFORE INSERT ON DISCOUNT
FOR EACH ROW
BEGIN
	SELECT SEQ_DISCOUNT_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_DISCUSSIONTHREADCOMMENT_ID BEFORE INSERT ON DISCUSSIONTHREADCOMMENT
FOR EACH ROW
BEGIN
	SELECT SEQ_DISCUSSIONTHREADCOMMENT_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_DISCUSSIONTHREAD_ID BEFORE INSERT ON DISCUSSIONTHREAD
FOR EACH ROW
BEGIN
	SELECT SEQ_DISCUSSIONTHREAD_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_DISCUSSIONTOPIC_ID BEFORE INSERT ON DISCUSSIONTOPIC
FOR EACH ROW
BEGIN
	SELECT SEQ_DISCUSSIONTOPIC_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_LIKES_ID BEFORE INSERT ON LIKES
FOR EACH ROW
BEGIN
	SELECT SEQ_LIKES_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_MEMBERSHIP_TYPE_ID BEFORE INSERT ON MEMBERSHIP_TYPE
FOR EACH ROW
BEGIN
	SELECT SEQ_MEMBERSHIP_TYPE_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_NOTIFICATION_ID BEFORE INSERT ON NOTIFICATION
FOR EACH ROW
BEGIN
	SELECT SEQ_NOTIFICATION_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_PACKAGES_ID BEFORE INSERT ON PACKAGES
FOR EACH ROW
BEGIN
	SELECT SEQ_PACKAGES_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_ROLE_ID BEFORE INSERT ON ROLE
FOR EACH ROW
BEGIN
	SELECT SEQ_ROLE_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_TEAM_ID BEFORE INSERT ON TEAM
FOR EACH ROW
BEGIN
	SELECT SEQ_TEAM_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_TICKETSAVAILABLE_ID BEFORE INSERT ON TICKETSAVAILABLE
FOR EACH ROW
BEGIN
	SELECT SEQ_TICKETSAVAILABLE_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_TRANSACTIONATTRACTION_ID BEFORE INSERT ON TRANSACTIONATTRACTION
FOR EACH ROW
BEGIN
	SELECT SEQ_TRANSACTIONATTRACTION_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_TRANSACTIONINFO_ID BEFORE INSERT ON TRANSACTIONINFO
FOR EACH ROW
BEGIN
	SELECT SEQ_TRANSACTIONINFO_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_TRANSACTIONPACKAGE_ID BEFORE INSERT ON TRANSACTIONPACKAGE
FOR EACH ROW
BEGIN
	SELECT SEQ_TRANSACTIONPACKAGE_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_TRANSACTIONREWARD_ID BEFORE INSERT ON TRANSACTIONREWARD
FOR EACH ROW
BEGIN
	SELECT SEQ_TRANSACTIONREWARD_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_USERBASE_ID BEFORE INSERT ON USERBASE
FOR EACH ROW
BEGIN
	SELECT SEQ_USERBASE_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
CREATE TRIGGER TRI_USERPHONES_ID BEFORE INSERT ON USERPHONES
FOR EACH ROW
BEGIN
	SELECT SEQ_USERPHONES_ID.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;

/

/* Comments */

COMMENT ON COLUMN DISCOUNT.FORMULA IS '% / $';
COMMENT ON COLUMN LIKES.CONTENTTYPE IS '1- City
2- Review
3- Topic
4- Attraction';
COMMENT ON COLUMN LIKES.LIKEORDISLIKE IS '1- Like
2- Dislike';
COMMENT ON COLUMN LIKES.FOREIGNID IS 'This can be the ID of the city, review, topic or attraction';
COMMENT ON COLUMN REVENUE.REVENUETYPE IS '0-deleted
1-Own Revenue
2-Commision Earned';
COMMENT ON COLUMN ROLE.TYPE IS 'Marketing / Operations';



